# monty_hall.jl
# This program simulates the Monty Hall Problem.
# It is written by AI and has been lightly edited by the instructor.

# Function to run a single game
function play_game(switch::Bool)
    # Defines a function named 'play_game' that takes one parameter 'switch', and its type is specified as Bool (Boolean). This means that the 'play_game' function accepts a Boolean argument, which can only be true or false.

    # Randomly place the car behind one of the doors
    car_behind_door = rand(1:3)
    # Generates a random integer between 1 and 3 (inclusive). This means it will randomly select either 1, 2, or 3 .The result is then assigned to the variable 'car_behind_door'.
    
    # Contestant makes an initial choice
    initial_choice = rand(1:3)
    # Generates a random integer between 1 and 3 (inclusive). This means it will randomly select either 1, 2, or 3 .The result is then assigned to the variable 'initial_choice'.
    
    # Host opens one of the other doors, revealing a goat
    possible_doors = [1, 2, 3]
    # Creates an array called 'possible_doors' that contains the elements 1, 2, and 3.

    possible_doors = setdiff(possible_doors, [initial_choice])
    # setdiff(A, B) returns the set difference of two arrays A and B, which removes the value randomly generated by 'initial_choice' from the 'possible_doors' array.

    if car_behind_door in possible_doors
    # Checks whether the value randomly selected by 'car_behind_door' is still in the array 'possible_doors'.
        host_opens = setdiff(possible_doors, [car_behind_door])[1]
    # If the condition is true, this line removes the value randomly selected by 'car_behind_door' from the array 'possible_doors', and the remaining value is then assigned to the variable 'host_opens'.
    else
    # If the condition is false.
        host_opens = possible_doors[1]
    # This line assigns the first value of the array 'possible_doors' to the variable 'host_opens'.
    end
    
    # Determine the remaining door if the contestant decides to switch
    remaining_doors = setdiff([1, 2, 3], [initial_choice, host_opens])
    # Assign the value which is different from the value randomly selected by 'initial_choice' and the value of the variable 'host_opens' to a array 'remaining_doors'.

    final_choice = switch ? remaining_doors[1] : initial_choice
    # Returns the first value of the array 'remaining_doors' if 'switch' is true. Return the value of 'initial_choice' if 'switch' is false. The result is then assigned to the variable 'final_choice'.
    
    # Return true if the final choice is the door with the car
    return final_choice == car_behind_door
    # If the value of 'final_choice' is equal to the value of 'car_behind_door' return 'True', if they are not equal to each other then return 'False'
end
# End the function.

# Function to run the simulation
function run_simulation(num_trials::Int, switch::Bool)
# Defines a function named run_simulation that takes two parameters, 'num_trials' which is an integer and 'switch' which is a Boolean.
    wins = 0
    # Assigns a variable 'wins' which is equal to 0.
    for t in 1:num_trials
    # Defines a loop that the value is start from 1 and end at the integer 'num_trials', and the variable is assigned to 't'.
        if play_game(switch)
        # Checks the result of the play_game function. If it returns true, the code inside the if block executes.
            wins += 1
            # Add 1 to the current value of the variable 'wins'.
        end
    end
    return wins / num_trials
    # Return the value of 'wins' divided by 'num_trials'.
end

# Number of simulations
num_trials = 10000
# Assigns a variable 'num_trials' which is equal to 10000.

# Run simulations for both strategies
stick_win_rate = run_simulation(num_trials, false)
# Assign a variable 'stick_win_rate' that is equal to the value generated by the function 'run_simulation' when 'num_trials' is equal to 10000 and switch is False.

switch_win_rate = run_simulation(num_trials, true)
# Assign a variable 'switch_win_rate' that is equal to the value generated by the function 'run_simulation' when 'num_trials' is equal to 10000 and switch is True.

# Print results
println("Probability of winning if you stick with your initial choice: ", stick_win_rate)
# Print the value of the variable 'stick_win_rate' with the text 'Probability of winning if you stick with your initial choice:' preceding.

println("Probability of winning if you switch: ", switch_win_rate)
# Print the value of the variable 'switch_win_rate' with the text 'Probability of winning if you switch:' preceding.


